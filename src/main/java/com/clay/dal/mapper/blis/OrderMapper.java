package com.clay.dal.mapper.blis;

import java.util.Map;

import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Options;
import org.apache.ibatis.annotations.Options.FlushCachePolicy;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Select;

@Mapper
public interface OrderMapper {

	@Select("SELECT ACC.ACCOUNTID, ACC.NAME ACCOUNTNAME, ACC.NOOPPIDCHECK, ACC.ACCOUNTTYPE, ACC.SUBTYPE ACCOUNTSUBTYPE, ORG.ORGANIZATIONUNITID ORGID, ORG.NAME ORGNAME,"
			+ " CUS.CHANNELID, UPO.ORGANIZATIONUNITID UPOID, UPO.NAME UPONAME, ACC.CURRENCYCODE, CUY.CURRENCYID"
			+ " FROM BLIS_ACCOUNT ACC, BLIS_CUSTOMER CUS, BLIS_ORGANIZATIONUNIT ORG, BLIS_ORGANIZATIONUNIT UPO, BLIS_CURRENCY CUY"
			+ " WHERE ACC.CUSTOMERID = CUS.CUSTOMERID AND CUS.ORGANIZATIONUNITID = ORG.ORGANIZATIONUNITID "
			+ " AND ORG.ULTIMATEPARENTID = UPO.ORGANIZATIONUNITID AND ACC.CURRENCYCODE = CUY.NAME AND ACC.NAME = #{accountName}")
	@Options(useCache = true, flushCache = FlushCachePolicy.FALSE, timeout = 10000)
	public Map<String, String> getOrderContext4CreateOrder(@Param("accountName") String accountName);

	@Select("SELECT ACC.ACCOUNTID, ACC.NAME ACCOUNTNAME, ACC.NOOPPIDCHECK, ACC.ACCOUNTTYPE, ACC.SUBTYPE ACCOUNTSUBTYPE, ORG.ORGANIZATIONUNITID ORGID,"
			+ " ORG.NAME ORGNAME, CUS.CHANNELID, UPO.ORGANIZATIONUNITID UPOID, UPO.NAME UPONAME, SNAP.SERVICESNAPSHOTID, OS.ORDEROFFERID, ORD.ORDERID, ACC.CURRENCYCODE, CUY.CURRENCYID"
			+ " FROM   ACC, BLIS_CUSTOMER CUS, BLIS_ORGANIZATIONUNIT ORG, BLIS_ORGANIZATIONUNIT UPO,"
			+ " BLIS_PORTFOLIOSNAPSHOTREF PF, BLIS_SERVICESNAPSHOT SNAP, BLIS_ORDERSERVICE OS, BLIS_ORDER ORD, BLIS_CURRENCY CUY"
			+ " WHERE ACC.CUSTOMERID = CUS.CUSTOMERID AND CUS.ORGANIZATIONUNITID = ORG.ORGANIZATIONUNITID AND ORG.ULTIMATEPARENTID = UPO.ORGANIZATIONUNITID "
			+ " AND ACC.SERVICEPORTFOLIOID = PF.SERVICEPORTFOLIOID AND PF.SERVICESNAPSHOTID = SNAP.SERVICESNAPSHOTID AND SNAP.ORDERSERVICEID = OS.ORDERSERVICEID "
			+ " AND OS.ORDERID = ORD.ORDERID AND ACC.CURRENCYCODE = CUY.NAME AND ACC.NAME = #{accountName} AND OS.ORDERSERVICEID = #{serviceId}")
	@Options(useCache = true, flushCache = FlushCachePolicy.FALSE, timeout = 10000)
	public Map<String, String> getOrderContext4ChangeOrder(@Param("accountName") String accountName,
			@Param("serviceId") String serviceId);

	@Select("SELECT INVOICE.INVOICEDEFINITIONID, INVOICE.HDPARTYID, ACC.ACCOUNTTYPE, INVOICE.CURRENCYCODE, SVRPROV.SERVICEPROVIDERID,"
			+ " SVRPROV.NAME SERVICEPROVIDERNAME, ORG.NAME ORGNAME, UPO.NAME UPONAME, INVOICE.BILLDAY, ACC.SUBTYPE, RS.QCPCTSR"
			+ " FROM BLIS_ACCOUNT ACC, BLIS_INVOICEDEFINITION INVOICE, BLIS_SERVICEPROVIDER SVRPROV, BLIS_CUSTOMER CUST, BLIS_ORGANIZATIONUNIT ORG, BLIS_ORGANIZATIONUNIT UPO, BLIS_REVENUESHARE RS"
			+ " WHERE INVOICE.ACCOUNTID = ACC.ACCOUNTID AND SVRPROV.CURRENCY = INVOICE.CURRENCYCODE AND SVRPROV.ACCOUNTTYPE = ACC.ACCOUNTTYPE "
			+ " AND ORG.PARENTID = UPO.ORGANIZATIONUNITID(+) AND CUST.ORGANIZATIONUNITID = ORG.ORGANIZATIONUNITID AND ACC.CUSTOMERID = CUST.CUSTOMERID "
			+ " AND INVOICE.ISDEFAULT = 1 AND RS.ACCOUNTID(+) = ACC.PARTNERACCOUNTID AND ACC.ACCOUNTID = #{accountId}")
	@Options(useCache = true, flushCache = FlushCachePolicy.FALSE, timeout = 10000)
	public Map<String, String> getOrderAddInfoInCreateByAccID(@Param("accountId") String accountId);
}
